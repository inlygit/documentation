
# Self hosting NocoDB with Docker

Docker installation - takes about three minutes!

Docker provides an easy way to install and run NocoDB. Follow these steps to get NocoDB up and running using Docker.

## Prerequisites[​](https://docs.nocodb.com/getting-started/self-hosted/installation/docker-install#prerequisites "Direct link to Prerequisites")

- [Docker](https://www.docker.com/get-started)

## Installation Steps[​](https://docs.nocodb.com/getting-started/self-hosted/installation/docker-install#installation-steps "Direct link to Installation Steps")

1. Choose your preferred database:

- SQLite
- Postgres

```
docker run -d --name nocodb-postgres \
-v "$(pwd)"/nocodb:/usr/app/data/ \
-p 8080:8080 \
-e NC_DB="pg://host.docker.internal:5432?u=root&p=password&d=d1" \
-e NC_AUTH_JWT_SECRET="569a1821-0a93-45e8-87ab-eb857f20a010" \
nocodb/nocodb:latest
```

1. Once the container is running, you can access NocoDB by opening [http://localhost:8080](http://localhost:8080/) in your web browser.

tip

To persist data, always mount a volume at `/usr/app/data/`. Without this, your data will be lost when the container is removed.

For versions prior to 0.10.6, mount the volume at /usr/src/app.

## Troubleshooting[​](https://docs.nocodb.com/getting-started/self-hosted/installation/docker-install#troubleshooting "Direct link to Troubleshooting")

- If you can't access NocoDB after installation, check if the Docker container is running:

```
docker ps
```

- If the container is not running, check the logs for any errors:

```
docker logs nocodb
```


# Self hosting NocoDB with Docker Compose

Docker Compose allows you to define and run multi-container Docker applications. It's a great way to set up NocoDB along with its database in a single configuration file.

## Prerequisites[​](https://docs.nocodb.com/getting-started/self-hosted/installation/docker-compose#prerequisites "Direct link to Prerequisites")

- [Docker](https://www.docker.com/get-started)
- [Docker Compose](https://docs.docker.com/compose/install/)

## Installation Steps[​](https://docs.nocodb.com/getting-started/self-hosted/installation/docker-compose#installation-steps "Direct link to Installation Steps")

1. Clone the NocoDB repository from GitHub.
    
    ```
    git clone https://github.com/nocodb/nocodb
    ```
    
2. Navigate to the docker-compose directory
    
    ```
    cd nocodb/docker-compose/2_pg
    ```
    
3. Start the services using Docker Compose:
    
    ```
    docker-compose up -d
    ```
    
    This will start NocoDB along with a PostgreSQL database.
    
4. Access NocoDB in your browser by visiting `http://localhost:8080`.
    

## Important Notes[​](https://docs.nocodb.com/getting-started/self-hosted/installation/docker-compose#important-notes "Direct link to Important Notes")

- The provided `docker-compose.yml` files are configured to persist data. Make sure the volumes are properly mounted.
- You can customize the `docker-compose.yml` file to change ports, environment variables, or add additional services.

## Troubleshooting[​](https://docs.nocodb.com/getting-started/self-hosted/installation/docker-compose#troubleshooting "Direct link to Troubleshooting")

- If you encounter any issues, check the logs using the following command:
    
    ```
    docker-compose logs
    ```
    
- If you need to stop the services, use the following command:
    
    ```
    docker-compose down
    ```
    
- Ensure all required ports are available on your host machine.
    
- For database connection issues, verify the database service is running:
    
    ```
    docker-compose ps
    ```
# Environment variables

For production use cases, it is crucial to set all environment variables marked as **"Mandatory"** to ensure optimal performance, security, and functionality of NocoDB.

---

## Database

| Variable                 | Mandatory | Description                                                                                                                                                                                  | If Not Set                                                                                       |
|--------------------------|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|
| `NC_DB`                  | Yes       | The primary database where all NocoDB metadata and data are stored. Example format: `pg://host.docker.internal:5432?u=username&p=password&d=database_name`.                             | A local SQLite database will be created in the root folder if `NC_DB` is not specified.           |
| `NC_DB_JSON`             | No        | Allows setting the database connection using a valid [knex connection JSON string](https://knexjs.org/guide/#configuration-options) instead of `NC_DB`.                                |                                                                                                  |
| `NC_DB_JSON_FILE`        | No        | A path to a knex connection JSON file can be used to specify the database connection, as an alternative to `NC_DB`.                                                                            |                                                                                                  |
| `DATABASE_URL`           | No        | A [JDBC URL string](https://jdbc.postgresql.org/documentation/use/#connecting-to-the-database) can be used for the database connection instead of `NC_DB`.                             |                                                                                                  |
| `DATABASE_URL_FILE`      | No        | A path to a file containing a JDBC URL can be specified for the database connection as an alternative to `NC_DB`.                                                                               |                                                                                                  |
| `NC_CONNECTION_ENCRYPT_KEY` | No     | The key used to encrypt the credentials of external databases. <br> **Warning:** Changing this variable may break the application. If you must change it, use the CLI as described in the [NocoDB Secret CLI documentation](/data-sources/updating-secret). | Keep connection credentials as plain text in the database if not set.                            |

---

## Authentication

| Variable                  | Mandatory | Description                                                                                                                                                         | If Not Set                                                                                                                      |
|---------------------------|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|
| `NC_AUTH_JWT_SECRET`      | Yes       | This JWT secret is utilized for generating authentication tokens.                                                                                                  | A random secret will be generated automatically.                                                                              |
| `NC_JWT_EXPIRES_IN`       | No        | Specifies the expiration time for JWT tokens.                                                                                                                       | Defaults to `10h`.                                                                                                              |
| `NC_GOOGLE_CLIENT_ID`     | No        | Google client ID required to activate Google authentication.                                                                                                        |                                                                                                                                |
| `NC_GOOGLE_CLIENT_SECRET` | No        | Google client secret required to activate Google authentication.                                                                                                    |                                                                                                                                |
| `NC_ADMIN_EMAIL`         | No        | Super admin email address. This is useful in case you need to recover your username and password. [See update requirements](#updating-super-admin-credentials).      | An initial prompt for email and password is required when accessing the UI for the first time.                                  |
| `NC_ADMIN_PASSWORD`      | No        | Super admin password. Must be at least 8 characters long, including one uppercase letter, one number, and one special character from <code>$&amp;+,:;=?@#'.^*()%!_-"</code>. [See update requirements](#updating-super-admin-credentials). |                                                                                                                                |
| `NC_DISABLE_EMAIL_AUTH`  | No        | Disables email and password-based authentication, intended for use when Google authentication variables are configured.                                              |                                                                                                                                |

### Updating Super Admin Credentials

To update **either** `NC_ADMIN_EMAIL` or `NC_ADMIN_PASSWORD`, you must set **both** variables together.

---

## Storage

| Variable                     | Mandatory | Description                                                                                                                                                                                       | If Not Set                                               |
|------------------------------|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|
| `NC_S3_BUCKET_NAME`          | No        | The name of the AWS S3 bucket used for the S3 storage plugin.                                                                                                                                     |                                                          |
| `NC_S3_REGION`               | No        | The AWS S3 region where the S3 storage plugin bucket is located. Note that `NC_S3_ENDPOINT` takes precedence if set (the endpoint URL includes the region).                                      |                                                          |
| `NC_S3_ENDPOINT`             | No        | S3 endpoint for S3 storage plugin.                                                                                                                                                                | Defaults to `s3.<region>.amazonaws.com`                  |
| `NC_S3_ACCESS_KEY`           | No        | The AWS access key ID for the S3 storage plugin. Required if no role access in use.                                                                                                               |                                                          |
| `NC_S3_ACCESS_SECRET`        | No        | The AWS access secret associated with the S3 storage plugin. Required if no role access in use.                                                                                                   |                                                          |
| `NC_S3_FORCE_PATH_STYLE`     | No        | Whether to force [path-style requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access) for the S3 storage plugin.                                 |                                                          |
| `NC_S3_ACL`                  | No        | The [ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html) for the objects in S3.                                                                                         |                                                          |
| `NC_ATTACHMENT_FIELD_SIZE`   | No        | Maximum file size allowed for [attachments](/fields/field-types/custom-types/attachment/) in bytes.                                                                                               | Defaults to `20971520` (20 MiB).                           |
| `NC_MAX_ATTACHMENTS_ALLOWED` | No        | Maximum number of attachments allowed per cell.                                                                                                                                                 | Defaults to `10`.                                        |
| `NC_ATTACHMENT_RETENTION_DAYS` | No      | Number of days to retain attachment on storage after all references deleted. (Set 0 to keep forever)                                                                                              | Defaults to `10`.                                        |
| `NC_SECURE_ATTACHMENTS`      | No        | Enables access to attachments only through pre-signed URLs. Set to `true` to activate; all other values are treated as `false`. ⚠ Note: Enabling this will make existing links inaccessible. | Defaults to `false`.                                     |
| `NC_ATTACHMENT_EXPIRE_SECONDS` | No     | Time in seconds after which pre-signed URLs for attachments start to expire. The actual expiration will occur after this time plus an additional 10 minutes. Only applicable if `NC_SECURE_ATTACHMENTS` is enabled. | Defaults to `7200` (2 hours).                              |

---

## Email Notifications

The following SMTP variables are used to send email notifications to users, e.g., invites.

| Variable              | Mandatory | Description                                                                                                                                                                          | If Not Set |
|-----------------------|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| `NC_SMTP_FROM`        | Yes       | The email address used as the sender for the SMTP plugin.                                                                                                                            |            |
| `NC_SMTP_HOST`        | Yes       | The hostname of the email server for the SMTP plugin.                                                                                                                                |            |
| `NC_SMTP_PORT`        | Yes       | The network port of the email server for the SMTP plugin.                                                                                                                            |            |
| `NC_SMTP_USERNAME`    | Yes       | The username for authentication with the SMTP plugin.                                                                                                                                |            |
| `NC_SMTP_PASSWORD`    | Yes       | The password for authentication with the SMTP plugin.                                                                                                                                |            |
| `NC_SMTP_SECURE`      | Yes       | Enables secure authentication for the SMTP plugin. Set to `true` to enable; all other values are considered `false`.                                                                  |            |
| `NC_SMTP_IGNORE_TLS`  | Yes       | Ignores TLS for the SMTP plugin. Set to `true` to ignore TLS; all other values are considered `false`. For more details, see [Nodemailer's SMTP documentation](https://nodemailer.com/smtp/). |            |

---

## Backend

| Variable      | Mandatory | Description                                                                                              | If Not Set           |
|---------------|-----------|----------------------------------------------------------------------------------------------------------|----------------------|
| `PORT`        | No        | Specifies the network port on which NocoDB will run.                                                     | Defaults to `8080`.  |
| `NODE_OPTIONS`| No        | Node.js [options](https://nodejs.org/api/cli.html#node_optionsoptions) to pass to the instance.           |                      |

---

## Frontend

| Variable                     | Mandatory | Description                                                                                                                                                        | If Not Set                                                                                                                                                             |
|------------------------------|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `NC_PUBLIC_URL`              | No        | This is the base URL used for constructing URLs in email templates, generating the Swagger documentation URL, and handling backend URL requirements. It should be set to your public-facing NocoDB URL to ensure consistency across the application. | By default, it infers the URL from the incoming request on the backend. If the server is behind a proxy, this may result in incorrect URLs.                             |
| `NC_DASHBOARD_URL`           | No        | Defines a custom dashboard URL path.                                                                                                                               | Defaults to `/dashboard`.                                                                                                                                              |
| `NUXT_PUBLIC_NC_BACKEND_URL` | No        | Specifies a custom backend URL.                                                                                                                                    | Defaults to `http://localhost:8080`.                                                                                                                                   |

---

## Cache

| Variable       | Mandatory | Description                                                                                                                                      | If Not Set               |
|----------------|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------|
| `NC_REDIS_URL` | Yes       | Specifies the Redis URL used for caching. <br> Eg: `redis://:authpassword@127.0.0.1:6380/4`                                                       | Caching layer of backend |

---

## Product Configuration

| Variable                           | Mandatory | Description                                                                                                                                           | If Not Set                                                                                                           |
|------------------------------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|
| `DB_QUERY_LIMIT_DEFAULT`           | No        | Default pagination limit for data tables.                                                                                                             | Defaults to `25`. Maximum is `100`                                                                                   |
| `DB_QUERY_LIMIT_GROUP_BY_GROUP`    | No        | Number of groups per page.                                                                                                                              | Defaults to `10`.                                                                                                    |
| `DB_QUERY_LIMIT_GROUP_BY_RECORD`   | No        | Number of records per group.                                                                                                                            | Defaults to `10`.                                                                                                    |
| `DB_QUERY_LIMIT_MAX`               | No        | Maximum allowable pagination limit.                                                                                                                   | Defaults to `1000`.                                                                                                  |
| `DB_QUERY_LIMIT_MIN`               | No        | Minimum allowable pagination limit.                                                                                                                   | Defaults to `10`.                                                                                                    |
| `NC_CONNECT_TO_EXTERNAL_DB_DISABLED` | No     | Disables the ability to create bases on external databases.                                                                                           |                                                                                                                      |
| `NC_INVITE_ONLY_SIGNUP`            | No        | Disables public signup; signup is possible only via invitations. Integrated into the [super admin settings menu](/account-settings/oss-specific-details#enable--disable-signup) as of version 0.99.0. |                                                                                                                      |
| `NC_REQUEST_BODY_SIZE`             | No        | Maximum bytes allowed in the request body, based on [ExpressJS limits](https://expressjs.com/en/resources/middleware/body-parser.html#limit).          | Defaults to `1048576` (1 MB).                                                                                          |
| `NC_EXPORT_MAX_TIMEOUT`            | No        | Sets a timeout in milliseconds for downloading CSVs in batches if not completed within this period.                                                   | Defaults to `5000` (5 seconds).                                                                                        |
| `NC_ALLOW_LOCAL_HOOKS`             | No        | Allows webhooks to call local network links, posing potential security risks. Set to `true` to enable; all other values are considered `false`.        | Defaults to `false`.                                                                                                 |
| `NC_SANITIZE_COLUMN_NAME`          | No        | Enables sanitization of column names during their creation to prevent SQL injection and other security issues.                                         | Defaults to `true`.                                                                                                  |
| `NC_TOOL_DIR`                      | No        | Specifies the directory to store metadata and app-related files. In Docker setups, this maps to `/usr/app/data/` for mounting volumes.                 | Defaults to the current working directory.                                                                           |
| `NC_DISABLE_PG_DATA_REFLECTION`    | No        | Disables the creation of a schema for each base in PostgreSQL. [Click here for more detail](#postgres-data-reflection)                                  |                                                                                                                      |
| `NC_MIGRATIONS_DISABLED`           | No        | Disables NocoDB migrations.                                                                                                                             |                                                                                                                      |
| `NC_DISABLE_AUDIT`                 | No        | Disables the audit log feature.                                                                                                                         | Defaults to `false`.                                                                                                 |
| `NC_AUTOMATION_LOG_LEVEL`          | No        | Configures logging levels for automation features. Possible values: `OFF`, `ERROR`, `ALL`. More details can be found under [Webhooks](/automation/webhook/create-webhook). | Defaults to `OFF`.                                                                                                   |

### Postgres Data Reflection

NocoDB UI is exactly what's in your Postgres database schema. Same tables, same columns—everything is perfectly mirrored. This is done by creating a schema for each base in PostgreSQL. This feature is enabled by default if the user has the required permissions. To disable it, set the `NC_DISABLE_PG_DATA_REFLECTION` environment variable to `false`.

---

## Logging & Monitoring

| Variable                 | Mandatory | Description                                                                                                              | If Not Set |
|--------------------------|-----------|--------------------------------------------------------------------------------------------------------------------------|------------|
| `NC_SENTRY_DSN`          | No        | Data Source Name (DSN) for integrating with Sentry for monitoring and error tracking.                                    |            |
| `NC_DISABLE_ERR_REPORTS` | No        | Disable default Sentry error reporting.                                                                                  | TRUE       |

---

## Debugging Only

| Variable           | Mandatory | Description                                                                                                                           | If Not Set           |
|--------------------|-----------|---------------------------------------------------------------------------------------------------------------------------------------|----------------------|
| `NC_DISABLE_CACHE` | No        | Disables caching to force metadata fetching directly from the database instead of Redis/cache. Recommended only during debugging. | Defaults to `false`. |

---

## Telemetry

| Variable          | Mandatory | Description                                                                                                                                           | If Not Set |
|-------------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| `NC_DISABLE_TELE` | No        | Disables the telemetry to prevent sending anonymous usage data. Please keep it enabled to help us understand the usage of the product and the impact that any new breaking change can cause. |            |

---

## Litestream

> Litestream is used **only** when `NC_DB` is set to SQLite. It backs up the SQLite database and stores it in S3.

| Variable                          | Mandatory | Description                                                                                                                                                                                                                                                                              | If Not Set                                                       |
|-----------------------------------|-----------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------|
| `LITESTREAM_S3_ENDPOINT`          | No        | URL of an S3-compatible object storage service endpoint for [Litestream](https://litestream.io/) replication of NocoDB's default SQLite database. Example: `s3.eu-central-1.amazonaws.com`.                                                                                       | Defaults to [AWS S3](https://aws.amazon.com/s3/).                 |
| `LITESTREAM_S3_REGION`            | No        | AWS region of the Litestream replication object storage bucket. Note that `LITESTREAM_S3_ENDPOINT` takes precedence if configured (the endpoint URL includes the region).                                                                                                             | Defaults to the [default region configured in AWS](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-region.html). |
| `LITESTREAM_S3_BUCKET`            | No        | Name of the object storage bucket to store the Litestream replication in.                                                                                                                                                                                                                | *Litestream replication is disabled if this variable is not set.*  |
| `LITESTREAM_S3_PATH`              | No        | Directory path to use within the Litestream replication object storage bucket.                                                                                                                                                                                                           | Defaults to `nocodb`.                                              |
| `LITESTREAM_S3_ACCESS_KEY_ID`     | No        | Authentication key ID for the Litestream replication object storage bucket.                                                                                                                                                                                                              | *Litestream replication is disabled if this variable is not set.*  |
| `LITESTREAM_S3_SECRET_ACCESS_KEY` | No        | Authentication secret for the Litestream replication object storage bucket.                                                                                                                                                                                                              | *Litestream replication is disabled if this variable is not set.*  |
| `LITESTREAM_S3_SKIP_VERIFY`       | No        | Whether to disable TLS verification for the Litestream replication object storage service. Useful when testing against a local node such as MinIO and you are using self-signed certificates.                                                                                     | Defaults to `false`.                                               |
| `LITESTREAM_RETENTION`            | No        | Amount of time Litestream snapshot and WAL files are kept. After the retention period, a new snapshot is created and the old one is removed. WAL files that exist before the oldest snapshot will also be removed.                                                               | Defaults to `1440h` (60 days).                                       |
| `LITESTREAM_RETENTION_CHECK_INTERVAL` | No   | Frequency in which Litestream will check if retention needs to be enforced.                                                                                                                                                                                                              | Defaults to `72h` (3 days).                                          |
| `LITESTREAM_SNAPSHOT_INTERVAL`    | No        | Frequency in which new Litestream snapshots are created. A higher frequency reduces the time to restore since newer snapshots will have fewer WAL frames to apply. Retention still applies to these snapshots.                                                               | Defaults to `24h` (1 day).                                           |
| `LITESTREAM_SYNC_INTERVAL`        | No        | Frequency in which frames are pushed to the Litestream replica. Increasing this frequency can increase object storage costs significantly.                                                                                                                                        | Defaults to `60s` (1 minute).                                          |
| `LITESTREAM_AGE_PUBLIC_KEY`       | No        | [age](https://age-encryption.org/) public key generated by `age-keygen` (`age1...`) or SSH public key (`ssh-ed25519 AAAA...`, `ssh-rsa AAAA...`) used to encrypt the Litestream replication. Refer to the relevant [Litestream documentation](https://litestream.io/reference/config/#encryption) for details. | *Litestream replication is unencrypted if this variable is not set.* |
| `LITESTREAM_AGE_SECRET_KEY`       | No        | [age](https://age-encryption.org/) secret key (`AGE-SECRET-KEY-1...`) used to encrypt the Litestream replication with. Refer to the relevant [Litestream documentation](https://litestream.io/reference/config/#encryption) for details.                                    | *Litestream replication is unencrypted if this variable is not set.* |
| `AWS_ACCESS_KEY_ID`               | No        | *Deprecated*. Please use `LITESTREAM_S3_ACCESS_KEY_ID` instead.                                                                                                                                                                                                                         |                                                                  |
| `AWS_SECRET_ACCESS_KEY`           | No        | *Deprecated*. Please use `LITESTREAM_S3_SECRET_ACCESS_KEY` instead.                                                                                                                                                                                                                     |                                                                  |
| `AWS_BUCKET`                      | No        | *Deprecated*. Please use `LITESTREAM_S3_BUCKET` instead.                                                                                                                                                                                                                                |                                                                  |
| `AWS_BUCKET_PATH`                 | No        | *Deprecated*. Please use `LITESTREAM_S3_PATH` instead.                                                                                                                                                                                                                                  |                                                                  |

# Upgrading

By default, if `NC_DB` is not specified upon [installation](https://docs.nocodb.com/getting-started/self-hosted/installation/auto-upstall), then SQLite will be used to store metadata. We suggest users to separate the metadata and user data in different databases as pictured in our [architecture](https://docs.nocodb.com/engineering/architecture).

## Docker[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#docker "Direct link to Docker")

### Find, Stop & Delete NocoDB Docker Container[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#find-stop--delete-nocodb-docker-container "Direct link to Find, Stop & Delete NocoDB Docker Container")

```
# find NocoDB container ID
docker ps
# stop NocoDB container
docker stop <YOUR_CONTAINER_ID>
# delete NocoDB container
docker rm <YOUR_CONTAINER_ID>
```

Note: Deleting your docker container without setting `NC_DB` or mounting to a persistent volume for a default SQLite database will result in losing your data. See examples below.

### Find & Remove NocoDB Docker Image[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#find--remove-nocodb-docker-image "Direct link to Find & Remove NocoDB Docker Image")

```
# find NocoDB image
docker images
# delete NocoDB image
docker rmi <YOUR_IMAGE_ID>
```

### Pull the latest NocoDB image with same environment variables[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#pull-the-latest-nocodb-image-with-same-environment-variables "Direct link to Pull the latest NocoDB image with same environment variables")

```
docker run -d -p 8080:8080 \
    -e NC_DB="<YOUR_NC_DB_URL>" \
    -e NC_AUTH_JWT_SECRET="<YOUR_NC_AUTH_JWT_SECRET_IF_GIVEN>" \
    nocodb/nocodb:latest
```

Updating NocoDB docker container is similar to updating [any other docker containers](https://www.whitesourcesoftware.com/free-developer-tools/blog/update-docker-images/).

### Example: Docker Upgrade[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#example-docker-upgrade "Direct link to Example: Docker Upgrade")

```
# Previous docker run
#
terminal % docker run -d --name myNocoDB \
-v "$(pwd)"/nocodb:/usr/app/data/ \
-p 8080:8080 \
-e NC_DB="pg://host.docker.internal:5432?u=postgres&p=password&d=d1" \
-e NC_AUTH_JWT_SECRET="569a1821-0a93-45e8-87ab-eb857f20a010" \
nocodb/nocodb:0.111.0
Unable to find image 'nocodb/nocodb:0.111.0' locally
0.111.0: Pulling from nocodb/nocodb
ad3fa0ea069c: Pull complete 
e43b9156e769: Pull complete 
c1bee0da1504: Pull complete 
adf78ab024d9: Pull complete 
cd8000d2c16a: Pull complete 
Digest: sha256:93b6e1ba2c0b90a26b205f9c7d44053aa6d8fa037eff9eb4155ca017f6c9bed4
Status: Downloaded newer image for nocodb/nocodb:0.111.0
afdc8edd1005c93e1df8f90d02e46430ea7b5c5610a2bf9ba105238d6c4d927b


# Find, stop and delete NocoDB docker container
#
terminal % docker ps
CONTAINER ID   IMAGE                   COMMAND                  CREATED          STATUS                 PORTS                    NAMES
afdc8edd1005   nocodb/nocodb:0.111.0   "/usr/bin/dumb-init …"   18 seconds ago   Up 18 seconds          0.0.0.0:8080->8080/tcp   myNocoDB
0202041b3607   postgres:14.7           "docker-entrypoint.s…"   2 days ago       Up 8 hours (healthy)   0.0.0.0:5432->5432/tcp   scripts_pg147_1

terminal % docker stop afdc8edd1005
afdc8edd1005

terminal % docker rm afdc8edd1005
afdc8edd1005


# Find and remove NocoDB docker image
#
terminal % docker images
REPOSITORY      TAG       IMAGE ID       CREATED        SIZE
nocodb/nocodb   0.111.0   34609411e87c   5 weeks ago    132MB
mysql           8.0       6a0560a40914   7 weeks ago    599MB
postgres        14.7      2075a95c7b3b   4 months ago   358MB

terminal % docker rmi 34609411e87c
Untagged: nocodb/nocodb:0.111.0
Untagged: nocodb/nocodb@sha256:93b6e1ba2c0b90a26b205f9c7d44053aa6d8fa037eff9eb4155ca017f6c9bed4
Deleted: sha256:3bfxxxx38e682742cbxxxx535b3503af45e931fb9bd15f46eca7d33cf4c54d72
Deleted: sha256:952152b5da42ae057c6688a04xxxx72e1a2f91825956f5c7e35f91d5b285d4d8
Deleted: sha256:3155197577xxxx673675ed1bce761714a24d7803f70a905740f7d4c248cxxxxx


# Pull & run the latest NocoDB image with same environment variables as before
#
terminal % docker run -d --name myNocoDB \
-v "$(pwd)"/nocodb:/usr/app/data/ \
-p 8080:8080 \
-e NC_DB="pg://host.docker.internal:5432?u=postgres&p=password&d=d1" \
-e NC_AUTH_JWT_SECRET="569a1821-0a93-45e8-87ab-eb857f20a010" \
nocodb/nocodb:latest
Unable to find image 'nocodb/nocodb:latest' locally
latest: Pulling from nocodb/nocodb
ad3fa0ea069c: Pull complete 
e43b9156e769: Pull complete 
c1bee0da1504: Pull complete 
adf78ab024d9: Pull complete 
28ce4fc94e48: Pull complete 
Digest: sha256:5c6df5ff0eb1278e1dbfe684af630a743ca73dfec8c30cab3bae9c1d0d640287
Status: Downloaded newer image for nocodb/nocodb:latest
ae793a04b75f2f3ee78abbaef09891396a884ec83320151a266326195649a058

```

## Node[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#node "Direct link to Node")

Updating docker container is similar to updating a npm package.

From your root folder

#### Uninstall NocoDB package[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#uninstall-nocodb-package "Direct link to Uninstall NocoDB package")

```
npm uninstall nocodb
```

#### Install NocoDB package[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#install-nocodb-package "Direct link to Install NocoDB package")

```
npm install --save nocodb
```

## Homebrew[​](https://docs.nocodb.com/getting-started/self-hosted/upgrading#homebrew "Direct link to Homebrew")

Run following commands to upgrade Homebrew Nocodb version.

```
# Update the local homebrew formulas  
brew update  
# Upgrade nocodb package  
brew upgrade nocodb
```

# Table details overview

`Table Details` section houses various tools & utilities to manage & work with your table schema & data. This essentially is a place for 'Creators' to build & manage their tables quickly. `Details` section is accessible using the `Data-Details` toggle switcher in the top navbar.

![image](https://docs.nocodb.com/assets/images/details-tab-8aeca1f70ead223a641ead51b82e97f5.png)

This section is divided into 4 parts:

## Fields[​](https://docs.nocodb.com/table-details/table-details-overview/#fields "Direct link to Fields")

Fields is a multi-field table schema editor that allows you to add, edit, delete and reorder fields quickly & easily from one place. Additional details about multi-field editor can be found [here](https://docs.nocodb.com/fields/multi-fields-editor)

![image](https://docs.nocodb.com/assets/images/details-field-editor-6b80e39a53b09c20af27e53b9777ea9a.png)

## Relations[​](https://docs.nocodb.com/table-details/table-details-overview/#relations "Direct link to Relations")

Relations are vital for managing data connections in a database. In a complex schema, it's essential to have a clear understanding of these connections because they:

1. Maintain data accuracy.
2. Enhance query efficiency.
3. Aid in logical schema design.
4. Support data analysis.
5. Enable proper application development.

Visualizing these relations through an Entity Relationship Diagram (ERD) simplifies their comprehension and management, especially as the database grows in complexity.

![image](https://docs.nocodb.com/assets/images/details-relations-0716794b3e749928f581e2a2f78931a3.png)

note

You can drag drop the tables to rearrange them in the diagram. Note that, such reordering will not persist across sessions.

## API Snippet[​](https://docs.nocodb.com/table-details/table-details-overview/#api-snippet "Direct link to API Snippet")

NocoDB provides programmatic access to your data via REST APIs. API snippets in NocoDB offer ready-made code examples in various programming languages, simplifying the process of integrating your data with external applications. These snippets save time and effort by providing a quick and easy reference for developers, enabling them to interact with your NocoDB database programmatically without the need to write code from scratch.

A quick snippet for different scripts & languages is listed in this section.

![image](https://docs.nocodb.com/assets/images/details-api-snippet-78906ef3b2248845b8955eed84a3031e.png)

### Sample snippets[​](https://docs.nocodb.com/table-details/table-details-overview/#sample-snippets "Direct link to Sample snippets")

- Shell
```
curl --request GET \
  --url 'http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer?offset=0&limit=25&where=' \
  --header 'xc-auth: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU'
```

- Javascript
```
import axios from "axios";

const options = {
  method: 'GET',
  url: 'http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer',
  params: {offset: '0', limit: '25', where: ''},
  headers: {
    'xc-auth': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU'
  }
};

axios.request(options).then(function (response) {
  console.log(response.data);
}).catch(function (error) {
  console.error(error);
});
```

- Node
```
var axios = require("axios").default;

var options = {
  method: 'GET',
  url: 'http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer',
  params: {offset: '0', limit: '25', where: ''},
  headers: {
    'xc-auth': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU'
  }
};

axios.request(options).then(function (response) {
  console.log(response.data);
}).catch(function (error) {
  console.error(error);
});
```

- NocoDB SDK
```
import { Api } from "nocodb-sdk";
const api = new Api({
  baseURL: "http://localhost:8080",
  headers: {
    "xc-auth": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU"
  }
})

api.dbViewRow.list(
  "noco",
  "ExternalDB",
  "Customer",
  "Customer", {
    "offset": 0,
    "limit": 25,
    "where": ""
}).then(function (data) {
  console.log(data);
}).catch(function (error) {
  console.error(error);
});
```

- PHP
```
<?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_PORT => "8080",
  CURLOPT_URL => "http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer?offset=0&limit=25&where=",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
  CURLOPT_HTTPHEADER => [
    "xc-auth: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}
```

- Python
```
import http.client

conn = http.client.HTTPConnection("localhost:8080")

headers = { 'xc-auth': "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU" }

conn.request("GET", "/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer?offset=0&limit=25&where=", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

- Ruby
```
require 'uri'
require 'net/http'

url = URI("http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer?offset=0&limit=25&where=")

http = Net::HTTP.new(url.host, url.port)

request = Net::HTTP::Get.new(url)
request["xc-auth"] = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU'

response = http.request(request)
puts response.read_body
```

- Java
```
HttpResponse<String> response = Unirest.get("http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer?offset=0&limit=25&where=")
  .header("xc-auth", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU")
  .asString();
```

- C
```
CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
curl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:8080/api/v1/db/data/noco/p18h72lcfwzpsvu/Customer/views/Customer?offset=0&limit=25&where=");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, "xc-auth: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAbm9jb2RiLmNvbSIsImRpc3BsYXlfbmFtZSI6IlJpY2hhcmQiLCJhdmF0YXIiOm51bGwsInVzZXJfbmFtZSI6bnVsbCwiaWQiOiJ1c3ExbGNpeWp4ejh5bzY4Iiwicm9sZXMiOnsib3JnLWxldmVsLXZpZXdlciI6dHJ1ZX0sInRva2VuX3ZlcnNpb24iOiI0ZjUyOTUxZGQwOTZmMTVjMTY0Y2U5MDM1OTk1YzlmMDE1MTJjMGNjOThkYmRiMDU2ZmFhM2JhZWE1OWY4Y2QzMTcyN2FjOWZkMTJjNDA2ZiIsImlhdCI6MTY5NTk5MTg0NywiZXhwIjoxNjk2MDI3ODQ3fQ.I7P5caoiDSO4j_3D032XxWxxXwyEju6pL5y3Mnu_MNU");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

CURLcode ret = curl_easy_perform(hnd);
```

## Supported Snippet[​](https://docs.nocodb.com/table-details/table-details-overview/#supported-snippet "Direct link to Supported Snippet")

### Shell[​](https://docs.nocodb.com/table-details/table-details-overview/#shell "Direct link to Shell")

- cURL
- wget

### Javascript[​](https://docs.nocodb.com/table-details/table-details-overview/#javascript "Direct link to Javascript")

- Axios
- Fetch
- jQuery
- XHR

### Node[​](https://docs.nocodb.com/table-details/table-details-overview/#node "Direct link to Node")

- Axios
- Fetch
- Request
- Native
- Unirest

### NocoDB SDK[​](https://docs.nocodb.com/table-details/table-details-overview/#nocodb-sdk "Direct link to NocoDB SDK")

- Javascript
- Node

### PHP[​](https://docs.nocodb.com/table-details/table-details-overview/#php "Direct link to PHP")

### Python[​](https://docs.nocodb.com/table-details/table-details-overview/#python "Direct link to Python")

- http.client
- request

### Ruby[​](https://docs.nocodb.com/table-details/table-details-overview/#ruby "Direct link to Ruby")

### Java[​](https://docs.nocodb.com/table-details/table-details-overview/#java "Direct link to Java")

### C[​](https://docs.nocodb.com/table-details/table-details-overview/#c "Direct link to C")

## Webhook[​](https://docs.nocodb.com/table-details/table-details-overview/#webhook "Direct link to Webhook")

Webhooks are essential for real-time communication and automation between NocoDB and external systems. They serve several crucial purposes:

1. **Instant Notifications:** Webhooks enable immediate notifications when there are changes in your NocoDB database. This real-time information can be crucial for timely responses to important events, such as new data entries, updates, or deletions.
    
2. **Automation:** They facilitate the automation of processes by triggering actions in external systems based on database events. For example, you can automate tasks like sending emails, updating spreadsheets, or syncing data with other applications in response to changes in NocoDB.
    
3. **Integration:** Webhooks allow you to seamlessly integrate NocoDB with other tools and services, enhancing the overall functionality of your database. This integration can streamline workflows, improve data consistency, and reduce manual data entry.
    
4. **Bulk Operations:** NocoDB's support for webhooks in bulk endpoints makes it efficient to handle multiple records simultaneously. This is especially useful when dealing with large datasets or when you need to perform batch operations in external systems.
    

In summary, webhooks in NocoDB empower you to create dynamic, responsive, and interconnected workflows by keeping external systems in sync with your database's activities.

![image](https://docs.nocodb.com/assets/images/details-webhook-834a408cf5a6b9d711ac6ab63a1eaa4a.png)

Note that, Webhooks currently are specific for associated table. Additional procedural details about webhooks can be found [here](https://docs.nocodb.com/automation/webhook/webhook-overview)